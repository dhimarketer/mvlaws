from flask import Flask, render_template, request, g
import sqlite3
import re

app = Flask(__name__)
DATABASE = "laws.db"

def get_db():
    db = getattr(g, "_database", None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, "_database", None)
    if db is not None:
        db.close()

def create_search_snippet(text, keywords, max_chars=250):
    """Create a context snippet around the first keyword match."""
    escaped_keywords = [re.escape(kw) for kw in keywords]
    pattern = r'.{0,' + str(max_chars // 3) + r'}(?:' + '|'.join(escaped_keywords) + r').{0,' + str(max_chars // 3) + r'}'
    match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
    if match:
        snippet = match.group(0)
        for kw in keywords:
            snippet = re.sub(f"({re.escape(kw)})", r"<mark>\1</mark>", snippet, flags=re.IGNORECASE)
        return "... " + snippet + " ..."
    return text[:max_chars] + "..." if len(text) > max_chars else text

@app.route("/", methods=["GET", "POST"])
def index():
    query = request.form.get("query", "").strip()
    match_type = request.form.get("match_type", "any")
    results = []

    if query:
        db = get_db()
        # Normalize input
        normalized_query = re.sub(r"[,+\s]+", " ", query).strip()
        keywords = [kw.strip() for kw in normalized_query.split() if kw.strip()]

        if not keywords:
            return render_template("index.html", results=[], query=query, match_type=match_type)

        # Build dynamic WHERE clause
        where_clauses = []
        params = []
        joiner = " OR " if match_type == "any" else " AND "

        for kw in keywords:
            where_clauses.append("(sub_articles.text_content LIKE ? OR articles.article_title LIKE ?)")
            search_term = f"%{kw}%"
            params.extend([search_term, search_term])

        where_sql = f"({joiner.join(where_clauses)})"

        sql = f"""
            SELECT 
                laws.id AS law_id,
                laws.law_name,
                articles.id AS article_id,
                articles.article_number,
                articles.article_title,
                sub_articles.sub_article_label,
                sub_articles.text_content
            FROM sub_articles
            JOIN articles ON sub_articles.article_id = articles.id
            JOIN laws ON articles.law_id = laws.id
            WHERE {where_sql}
            ORDER BY laws.law_name, articles.article_number, sub_articles.sub_article_label
        """

        cursor = db.execute(sql, params)
        fetched_results = cursor.fetchall()

        # Process results: highlight + snippet + relevance score
        processed_results = []
        for row in fetched_results:
            text = row["text_content"]
            title = row["article_title"] or ""

            # Relevance score: count matches
            score = sum(1 for kw in keywords if kw.lower() in text.lower() or kw.lower() in title.lower())

            # Highlight keywords
            highlighted_text = text
            for kw in keywords:
                highlighted_text = re.sub(
                    f"({re.escape(kw)})",
                    r"<mark>\1</mark>",
                    highlighted_text,
                    flags=re.IGNORECASE
                )

            # Create snippet
            snippet = create_search_snippet(text, keywords)

            processed_results.append({
                "law_id": row["law_id"],
                "law_name": row["law_name"],
                "article_id": row["article_id"],
                "article_number": row["article_number"],
                "article_title": row["article_title"],
                "sub_article_label": row["sub_article_label"],
                "text_content": highlighted_text,
                "snippet": snippet,
                "relevance": score
            })

        # Sort by relevance (descending), then by law/article
        processed_results.sort(key=lambda x: (-x["relevance"], x["law_name"], int(x["article_number"])))

        results = processed_results

    return render_template("index.html", results=results, query=query, match_type=match_type)
    
    @app.route("/law/<int:law_id>")
def view_law(law_id):
    db = get_db()
    sql = """
        SELECT laws.law_name, articles.article_number, articles.article_title,
               sub_articles.sub_article_label, sub_articles.text_content
        FROM laws
        JOIN articles ON laws.id = articles.law_id
        JOIN sub_articles ON articles.id = sub_articles.article_id
        WHERE laws.id = ?
        ORDER BY articles.article_number, sub_articles.sub_article_label
    """
    cursor = db.execute(sql, (law_id,))
    sections = cursor.fetchall()
    return render_template("law.html", sections=sections)

@app.route("/article/<int:article_id>")
def view_article(article_id):
    db = get_db()
    sql = """
        SELECT laws.law_name, articles.article_number, articles.article_title,
               sub_articles.sub_article_label, sub_articles.text_content
        FROM articles
        JOIN laws ON articles.law_id = laws.id
        JOIN sub_articles ON articles.id = sub_articles.article_id
        WHERE articles.id = ?
        ORDER BY sub_articles.sub_article_label
    """
    cursor = db.execute(sql, (article_id,))
    sections = cursor.fetchall()
    return render_template("article.html", sections=sections)

if __name__ == "__main__":
    app.run(debug=True)
